#version 330 core

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform vec3 attenuation;

in vec3 vertexColor;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

void main(){

	//Ambient
	float ambientStrength = 1f;
    vec3 ambient = ambientStrength * vec3(1.0);

    //Diffuse
	float diffuseStrength = 1f;
	vec3 norm = normalize(Normal);
	vec3 lightDirection = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDirection), 0);
	vec3 diffuse = diffuseStrength * diff * vec3(1.0);

	//Specular
	float specularStrength = 1f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDirection, norm);
	float spec = pow(max(dot(reflectDir, viewDir), 0), 32);
	vec3 specular = specularStrength * spec * vec3(1.0);
	
	float dist = length(lightPos - FragPos);
	float fatt = 1/(attenuation.x + attenuation.y*dist + attenuation.z*pow(dist,2));

	vec3 result = fatt * (ambient + diffuse + specular) * vertexColor;
	color = vec4(result, 1.0f);
	
}
