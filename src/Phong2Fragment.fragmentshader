#version 330 core

uniform vec3 lightPos;
uniform vec3 viewPos;

in vec3 vertexColor;
in vec2 textureCoord;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

struct Material {
	sampler2D diffuse;
	sampler2D specular;
	float shininess;
};
uniform Material material;

void main(){

	//Ambient
	float ambientStrength = 0.1f;
    vec3 ambient = ambientStrength * vec3(1.0);

    //Diffuse
	vec3 norm = normalize(Normal);
	vec3 lightDir = normalize(lightPos - FragPos);
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 diffuse = diff * vec3(1.0);

	//Specular
	float specularStrength = 0.5f;
	vec3 viewDir = normalize(viewPos - FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * vec3(1.0);

	vec3 result = (ambient + diffuse + specular) * vec3(texture(material.diffuse, textureCoord));
	color = vec4(result, 1.0f);
	
}
