#version 330 core

uniform vec3 lightPos;
uniform vec3 lightDir;
uniform vec3 viewPos;
uniform vec3 attenuation;
uniform float aperturaMax;
uniform float aperturaMin;

in vec3 vertexColor;
in vec3 Normal;
in vec3 FragPos;

out vec4 color;

void main(){

    // Ambient
    vec3 ambient = 0.5 * vec3(1.0) * vertexColor;
    
    // Diffuse 
    vec3 norm = normalize(Normal);        
    vec3 lightDirection = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDirection), 0.0);
    vec3 diffuse = vec3(1.0) * diff * vertexColor;  
    
    // Specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDirection, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    vec3 specular = vec3(1.0) * spec * vertexColor;
    
    // Spotlight (soft edges)
    float theta = dot(lightDirection, normalize(-lightDir)); 
    float epsilon = (aperturaMin - aperturaMax);
    float intensity = clamp((theta - aperturaMax) / epsilon, 0.0, 1.0);
	diffuse *= intensity;
    specular *= intensity;
    
    // Attenuation
    float distance = length(lightPos - FragPos);
    float att = 1.0f / (attenuation.x + attenuation.y * distance + attenuation.z * (distance * distance));    
    ambient  *= att; 
    diffuse  *= att;
    specular *= att;
            
    color = vec4(ambient + diffuse + specular, 1.0f);

}
